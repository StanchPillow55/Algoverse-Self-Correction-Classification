Question ID: HumanEval/12
Turn: 0
Dataset Type: code
==================================================

To solve the problem of finding the longest string in a list, we need to consider a few key points:

1. **Handling an Empty List**: If the input list is empty, we should return `None`. This is a straightforward check at the beginning of our function.

2. **Finding the Longest String**: We need to iterate through the list of strings and keep track of the longest string encountered so far. If we find a string longer than the current longest, we update our longest string.

3. **Handling Ties**: If there are multiple strings of the same maximum length, we should return the first one encountered. This is naturally handled by our approach of updating the longest string only when we find a strictly longer string.

4. **Implementation Details**: 
   - We'll initialize a variable to keep track of the longest string found so far. We'll start with `None` or an empty string.
   - As we iterate through the list, we'll compare the length of each string with the length of the current longest string.
   - If a string is longer, we'll update our longest string variable.
   - Finally, we'll return the longest string found.

Let's implement this logic in the function:

```python
from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    """ Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    """
    if not strings:
        return None
    
    longest_string = strings[0]
    
    for string in strings:
        if len(string) > len(longest_string):
            longest_string = string
    
    return longest_string

# Test cases
print(longest([]))  # Expected output: None
print(longest(['a', 'b', 'c']))  # Expected output: 'a'
print(longest(['a', 'bb', 'ccc']))  # Expected output: 'ccc'
```

### Explanation:
- **Empty List Check**: We start by checking if the list is empty. If it is, we return `None`.
- **Initialization**: We initialize `longest_string` with the first string in the list. This ensures that we have a valid string to compare against.
- **Iteration and Comparison**: We iterate over each string in the list. For each string, we compare its length with the length of `longest_string`. If it's longer, we update `longest_string`.
- **Return**: After iterating through the list, `longest_string` will contain the longest string, which we return.

This approach efficiently finds the longest string while handling edge cases like an empty list or ties in string length.

==================================================
Trace saved at: reasoning_traces/code/HumanEval/12/turn_0_reasoning.txt