Question ID: HumanEval/108
Turn: 0
Dataset Type: code
==================================================

To solve this problem, we need to create a function `count_nums` that takes an array of integers and returns the count of numbers whose sum of digits is greater than zero. Let's break down the problem and approach it step by step:

### Step-by-Step Approach:

1. **Understand the Problem:**
   - We need to iterate over each integer in the array.
   - For each integer, we need to calculate the sum of its digits.
   - If the sum of digits is greater than zero, we count that integer.

2. **Handling Negative Numbers:**
   - For negative numbers, the first digit is negative. For example, in `-123`, the digits are `-1`, `2`, and `3`.
   - We need to ensure that the sign of the first digit is considered when calculating the sum of digits.

3. **Calculate Sum of Digits:**
   - Convert the number to a string to easily iterate over each digit.
   - If the number is negative, the first character will be `'-'`, so we need to handle it separately.
   - Convert each character back to an integer and calculate the sum.

4. **Count Numbers with Positive Sum of Digits:**
   - Initialize a counter to zero.
   - For each number, if the sum of its digits is greater than zero, increment the counter.

5. **Return the Result:**
   - Return the counter as the result.

### Implementation:

Let's implement the function based on the above plan:

```python
def count_nums(arr):
    def sum_of_digits(num):
        # Convert the number to a string
        num_str = str(num)
        # Initialize sum
        total = 0
        # Iterate over each character in the string
        for i, char in enumerate(num_str):
            if i == 0 and char == '-':
                # If it's the first character and it's a negative sign, handle the first digit as negative
                continue
            elif i == 0 and char.isdigit():
                # If it's the first character and it's a digit, handle it normally
                total += int(char)
            else:
                # For all other digits, just add them
                total += int(char)
        # If the number is negative, subtract twice the first digit (to account for the negative sign)
        if num < 0:
            total -= 2 * int(num_str[1])
        return total
    
    # Initialize counter
    count = 0
    # Iterate over each number in the array
    for num in arr:
        # Calculate the sum of digits
        if sum_of_digits(num) > 0:
            # Increment count if sum of digits is greater than zero
            count += 1
    return count

# Test cases
print(count_nums([]))        # Expected output: 0
print(count_nums([-1, 11, -11]))  # Expected output: 1
print(count_nums([1, 1, 2]))  # Expected output: 3
```

### Explanation:

- **sum_of_digits Function:** This helper function calculates the sum of the digits of a number, taking into account the sign of the first digit if the number is negative.
- **Main Function Logic:** We iterate over each number in the array, use the helper function to calculate the sum of its digits, and count how many numbers have a positive sum of digits.

This implementation should correctly solve the problem as described.

==================================================
Trace saved at: reasoning_traces/code/HumanEval/108/turn_0_reasoning.txt