turn 1
To solve the problem of deleting characters from string `s` that are present in string `c` and then checking if the resulting string is a palindrome, we can break down the solution into several clear steps:

1. **Character Deletion**: We need to iterate through each character in string `s` and check if it is present in string `c`. If it is not present, we will keep it; otherwise, we will discard it.

2. **Palindrome Check**: After constructing the new string (which is `s` with characters from `c` removed), we need to check if this new string reads the same forwards and backwards. A string is a palindrome if it is equal to its reverse.

3. **Return the Result**: Finally, we will return a tuple containing the modified string and a boolean indicating whether it is a palindrome.

### Implementation Steps

- Use a list comprehension to build the new string by filtering out characters that are in `c`.
- Use string slicing to check if the new string is equal to its reverse.
- Return the new string and the result of the palindrome check as a tuple.

### Edge Cases
- If `s` is empty, the result should be an empty string and it should be considered a palindrome.
- If `c` is empty, the result should be the original string `s` and we should check if `s` is a palindrome.

Now, let's implement the function based on this reasoning:

```python
def reverse_delete(s, c):
    """Task
    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    """
    # Step 1: Create a set of characters to delete for faster lookup
    chars_to_delete = set(c)
    
    # Step 2: Build the new string by filtering out characters in chars_to_delete
    result_string = ''.join([char for char in s if char not in chars_to_delete])
    
    # Step 3: Check if the result_string is a palindrome
    is_palindrome = result_string == result_string[::-1]
    
    # Step 4: Return the result as a tuple
    return (result_string, is_palindrome)

# Example usage:
print(reverse_delete("abcde", "ae"))  # Output: ('bcd', False)
print(reverse_delete("abcdef", "b"))   # Output: ('acdef', False)
print(reverse_delete("abcdedcba", "ab"))  # Output: ('cdedc', True)
```

### Explanation of the Code:
- We first convert `c` into a set called `chars_to_delete` for efficient membership testing.
- We then construct `result_string` using a list comprehension that includes only those characters from `s` that are not in `chars_to_delete`.
- We check if `result_string` is a palindrome by comparing it to its reverse (`result_string[::-1]`).
- Finally, we return a tuple containing the filtered string and the boolean result of the palindrome check.

This implementation is efficient and straightforward, adhering to the problem requirements.
PASS: All tests passed