turn 1
To solve the problem of converting GPAs to letter grades based on the provided grading scale, we can break down the task into several clear steps:

1. **Understand the Input and Output**: 
   - The input is a list of GPAs (floating-point numbers).
   - The output should be a list of corresponding letter grades based on the GPA grading scale provided.

2. **Define the Grading Scale**: 
   - We need to create a mapping of GPA ranges to their respective letter grades. This can be done using a series of conditional statements (if-elif-else) to check the GPA against the defined thresholds.

3. **Iterate Over the Input List**: 
   - For each GPA in the input list, we will determine the corresponding letter grade using the grading scale.

4. **Return the Result**: 
   - Finally, we will return a list of letter grades that corresponds to the input GPAs.

### Implementation Steps:
- Create a function named `numerical_letter_grade` that takes a list of GPAs as an argument.
- Initialize an empty list to store the letter grades.
- Use a loop to iterate through each GPA in the input list.
- Use conditional statements to check the GPA against the defined thresholds and append the corresponding letter grade to the list.
- Return the list of letter grades.

### Implementation:

Here is the complete function definition based on the reasoning above:

```python
def numerical_letter_grade(grades):
    """Convert a list of GPAs to letter grades based on a specific grading scale."""
    
    # Initialize an empty list to hold the letter grades
    letter_grades = []
    
    # Iterate through each GPA in the input list
    for gpa in grades:
        if gpa == 4.0:
            letter_grades.append('A+')
        elif gpa > 3.7:
            letter_grades.append('A')
        elif gpa > 3.3:
            letter_grades.append('A-')
        elif gpa > 3.0:
            letter_grades.append('B+')
        elif gpa > 2.7:
            letter_grades.append('B')
        elif gpa > 2.3:
            letter_grades.append('B-')
        elif gpa > 2.0:
            letter_grades.append('C+')
        elif gpa > 1.7:
            letter_grades.append('C')
        elif gpa > 1.3:
            letter_grades.append('C-')
        elif gpa > 1.0:
            letter_grades.append('D+')
        elif gpa > 0.7:
            letter_grades.append('D')
        elif gpa > 0.0:
            letter_grades.append('D-')
        else:
            letter_grades.append('E')
    
    # Return the list of letter grades
    return letter_grades

# Example usage
print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Output: ['A+', 'B', 'C-', 'C', 'A-']
```

### Explanation of the Code:
- The function `numerical_letter_grade` takes a list of GPAs as input.
- It initializes an empty list `letter_grades` to store the results.
- It loops through each GPA and checks it against the grading scale using a series of `if-elif` statements.
- Depending on the GPA value, it appends the corresponding letter grade to the `letter_grades` list.
- Finally, it returns the list of letter grades.

This approach is straightforward and efficiently maps each GPA to its corresponding letter grade based on the specified criteria.
PASS: All tests passed