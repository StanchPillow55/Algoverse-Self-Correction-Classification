turn 1
To solve the problem of finding the n-th Fibonacci number that is also prime, we need to break down the task into manageable steps. Hereâ€™s how we can approach it:

### Step 1: Understand Fibonacci Numbers
Fibonacci numbers are defined by the recurrence relation:
- F(0) = 0
- F(1) = 1
- F(n) = F(n-1) + F(n-2) for n >= 2

The sequence starts as follows: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...

### Step 2: Understand Prime Numbers
A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. The smallest prime numbers are: 2, 3, 5, 7, 11, 13, ...

### Step 3: Identify the Task
We need to find Fibonacci numbers and check if they are prime. We will continue this process until we find the n-th Fibonacci number that is also prime.

### Step 4: Implement Helper Functions
1. **Fibonacci Generator**: We can create a function to generate Fibonacci numbers.
2. **Prime Checker**: We can create a function to check if a number is prime.

### Step 5: Combine the Logic
We will generate Fibonacci numbers, check if they are prime, and keep a count of how many prime Fibonacci numbers we have found. Once we reach the n-th prime Fibonacci number, we will return it.

### Step 6: Implementation
Now, let's implement the solution based on the reasoning above.

```python
def is_prime(num: int) -> bool:
    """Check if a number is prime."""
    if num <= 1:
        return False
    if num <= 3:
        return True
    if num % 2 == 0 or num % 3 == 0:
        return False
    i = 5
    while i * i <= num:
        if num % i == 0 or num % (i + 2) == 0:
            return False
        i += 6
    return True

def fibonacci_generator():
    """Generate Fibonacci numbers indefinitely."""
    a, b = 0, 1
    while True:
        yield b  # We yield b because we want the Fibonacci sequence starting from F(1)
        a, b = b, a + b

def prime_fib(n: int) -> int:
    """
    Returns the n-th Fibonacci number that is also prime.
    """
    count = 0
    for fib in fibonacci_generator():
        if is_prime(fib):
            count += 1
            if count == n:
                return fib

# Example usage:
# print(prime_fib(1))  # Should return 2
# print(prime_fib(2))  # Should return 3
# print(prime_fib(3))  # Should return 5
# print(prime_fib(4))  # Should return 13
# print(prime_fib(5))  # Should return 89
```

### Explanation of the Code:
1. **is_prime Function**: This function checks if a number is prime using trial division. It handles small numbers directly and uses a loop to check divisibility for larger numbers.
2. **fibonacci_generator Function**: This is a generator that yields Fibonacci numbers indefinitely, starting from the first Fibonacci number (1).
3. **prime_fib Function**: This function uses the Fibonacci generator to get Fibonacci numbers one by one. It checks each Fibonacci number for primality and counts how many prime Fibonacci numbers have been found. When the count reaches n, it returns the current Fibonacci number.

This implementation is efficient and straightforward, allowing us to find the n-th prime Fibonacci number as required.
PASS: All tests passed