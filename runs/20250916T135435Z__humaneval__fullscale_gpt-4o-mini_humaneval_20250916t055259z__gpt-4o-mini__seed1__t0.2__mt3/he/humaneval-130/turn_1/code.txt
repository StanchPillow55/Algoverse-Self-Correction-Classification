def tri(n):
    """Generate the first n + 1 numbers of the Tribonacci sequence."""
    # Initialize the list to hold the sequence values
    tribonacci_sequence = []
    
    # Compute values from tri(0) to tri(n)
    for i in range(n + 1):
        if i == 0:
            # Assuming tri(0) = 1 based on the pattern
            tribonacci_sequence.append(1)
        elif i == 1:
            # Base case
            tribonacci_sequence.append(3)
        elif i % 2 == 0:
            # Even case
            tribonacci_sequence.append(1 + i / 2)
        else:
            # Odd case
            # tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1)
            # We need to calculate tri(i - 1), tri(i - 2), and tri(i + 1)
            # However, we can only calculate tri(i + 1) after we finish the loop
            # So we will use the already computed values
            tri_i_minus_1 = tribonacci_sequence[i - 1]
            tri_i_minus_2 = tribonacci_sequence[i - 2]
            # We need to calculate tri(i + 1) later, but for now we can just use the known values
            # We will store a placeholder for tri(i + 1)
            tribonacci_sequence.append(tri_i_minus_1 + tri_i_minus_2 + 0)  # Placeholder for tri(i + 1)
    
    # Now we need to calculate the tri(i + 1) for odd indices
    for i in range(1, n + 1, 2):
        # Calculate tri(i + 1) using the last computed values
        tribonacci_sequence[i] = tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i + 1]
    
    return tribonacci_sequence

# Example usage
print(tri(3))  # Output: [1, 3, 2, 8]