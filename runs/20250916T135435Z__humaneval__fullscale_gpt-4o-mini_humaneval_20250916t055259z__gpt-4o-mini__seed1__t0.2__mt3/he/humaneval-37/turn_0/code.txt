def sort_even(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indices, while its values at the even indices are equal
    to the values of the even indices of l, but sorted.
    
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """
    
    # Step 1: Extract even indexed elements
    even_elements = [l[i] for i in range(0, len(l), 2)]
    
    # Step 2: Sort the even indexed elements
    even_elements.sort()
    
    # Step 3: Create a new list to hold the result
    result = []
    
    # Step 4: Reconstruct the list
    even_index = 0  # Pointer for sorted even elements
    for i in range(len(l)):
        if i % 2 == 0:  # Even index
            result.append(even_elements[even_index])
            even_index += 1
        else:  # Odd index
            result.append(l[i])
    
    return result

# Example usage
print(sort_even([5, 6, 3, 4]))  # Output: [3, 6, 5, 4]
print(sort_even([1, 2, 3]))      # Output: [1, 2, 3]