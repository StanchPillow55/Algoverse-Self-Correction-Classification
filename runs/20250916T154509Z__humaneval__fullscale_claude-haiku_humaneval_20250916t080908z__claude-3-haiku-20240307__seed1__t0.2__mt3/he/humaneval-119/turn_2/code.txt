def match_parens(lst):
    """
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    """
    # Count the number of open and close parentheses in each string
    open_count1, close_count1 = 0, 0
    open_count2, close_count2 = 0, 0
    for char in lst[0]:
        if char == '(':
            open_count1 += 1
        else:
            close_count1 += 1
    for char in lst[1]:
        if char == '(':
            open_count2 += 1
        else:
            close_count2 += 1

    # Check if the total number of open and close parentheses are equal
    total_open = open_count1 + open_count2
    total_close = close_count1 + close_count2
    if total_open != total_close:
        return 'No'

    # Check if we can balance the parentheses by concatenating the two strings
    if (open_count1 >= close_count2 and close_count1 >= open_count2) or \
       (open_count2 >= close_count1 and close_count2 >= open_count1):
        return 'Yes'
    else:
        return 'No'