import math

def poly(xs: list, x: float):
    """
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

def find_zero(xs: list):
    """
    Finds a single zero point of the polynomial with coefficients xs.
    The list xs must have an even number of elements, and the largest
    non-zero coefficient must be the first one.
    """
    # Check if the input list has an even number of elements
    if len(xs) % 2 != 0:
        raise ValueError("The list of coefficients must have an even number of elements.")

    # Check if the largest non-zero coefficient is the first one
    if xs[0] == 0:
        raise ValueError("The largest non-zero coefficient must be the first one.")

    # Initialize the starting point for the Newton-Raphson method
    x = 0.0

    # Perform the Newton-Raphson iteration
    for _ in range(100):
        # Evaluate the polynomial and its derivative at the current point
        f = poly(xs, x)
        f_prime = poly([i * coeff for i, coeff in enumerate(xs)], x)

        # Update the current point using the Newton-Raphson formula
        x_next = x - f / f_prime
        if abs(x_next - x) < 1e-10:
            break
        x = x_next

    return x