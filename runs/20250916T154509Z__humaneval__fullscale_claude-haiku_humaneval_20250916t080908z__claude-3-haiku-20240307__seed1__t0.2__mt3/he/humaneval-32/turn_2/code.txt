import math

def poly(xs: list, x: float):
    """
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

def find_zero(xs: list):
    """ xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """
    # Check if the input list has an even number of coefficients
    if len(xs) % 2 != 0:
        raise ValueError("The input list must have an even number of coefficients.")

    # Check if the largest non-zero coefficient is the first one
    if xs[0] == 0:
        raise ValueError("The largest non-zero coefficient must be the first one.")

    # Initialize the Bisection Method
    a = -10.0  # Initial lower bound
    b = 10.0   # Initial upper bound
    tol = 1e-6 # Tolerance for the solution

    # Iterate until the solution is found
    while abs(b - a) > tol:
        c = (a + b) / 2  # Midpoint of the interval
        if poly(xs, a) * poly(xs, c) < 0:
            b = c  # The root is in the left half
        else:
            a = c  # The root is in the right half

    # Return the final solution
    return (a + b) / 2