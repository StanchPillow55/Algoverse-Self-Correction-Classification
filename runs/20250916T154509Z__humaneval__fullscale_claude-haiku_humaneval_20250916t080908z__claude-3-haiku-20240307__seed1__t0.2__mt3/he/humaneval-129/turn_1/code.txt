def minPath(grid, k):
    n = len(grid)
    min_path = []
    visited = set()

    def dfs(i, j, path, length):
        if length == k:
            nonlocal min_path
            if not min_path or path < min_path:
                min_path = path[:]
            return

        if (i, j) in visited:
            return

        visited.add((i, j))
        path.append(grid[i][j])

        for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            new_i, new_j = i + di, j + dj
            if 0 <= new_i < n and 0 <= new_j < n:
                dfs(new_i, new_j, path, length + 1)

        visited.remove((i, j))
        path.pop()

    for i in range(n):
        for j in range(n):
            dfs(i, j, [], 0)

    return min_path